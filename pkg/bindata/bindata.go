// Code generated by go-bindata.
// sources:
// deploy/.DS_Store
// deploy/cluster-deployment.yaml
// deploy/cr.yaml
// deploy/crd.yaml
// deploy/deployment.yaml
// deploy/rbac.yaml
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _deployDs_store = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\xb1\x4e\xfa\x50\x14\x87\xbf\xdb\x3f\xf9\x5b\xc2\x60\x37\x1c\x3b\xba\x60\xe2\xec\xd2\x10\x1c\x9c\x7d\x01\x4b\x21\x2e\xc5\x1a\x84\x81\xad\x8b\xef\xe0\x2b\xf8\x7c\x3e\x80\xa6\xbd\x3f\x63\x2d\x74\x70\x30\x56\x73\xbe\x84\x7c\x09\x9c\x73\xee\x0d\x97\x5c\xce\x29\xe0\xa6\xdb\xc5\x39\x44\x40\x88\x77\x30\xe4\x20\xa1\x5e\x7b\x04\xf2\xff\xaa\x5e\x5d\x63\xc3\x92\x35\x13\x16\x2c\x0f\xd7\x32\x7a\x46\x75\x76\x63\x32\x72\xb6\x3c\x7c\x3a\xbf\x7b\x72\x0a\x76\xac\x58\x72\xc7\x86\x33\x76\xa4\xac\xc8\xaf\xf2\x22\x9b\xe7\xc5\x5c\x3f\x9b\x0b\xe0\xf4\xb5\xa6\xae\x78\x44\xc6\xba\x33\xfa\xb9\x15\x1d\xd6\xd1\x8b\xae\x78\x37\x6e\xc5\x1f\x7f\x79\x6f\x4f\x8d\xec\x11\x05\x39\x2b\x26\x64\xa4\x6c\x48\xeb\x3a\xb7\xad\x35\x1f\x5b\x6b\x0e\x59\x33\x27\x25\xeb\xdc\xe5\x4b\x2b\xc3\x30\x0c\xa3\xdf\x38\xaf\x70\xf4\xd3\x1b\x31\x0c\xa3\x77\x54\xf7\x43\x2c\x27\x72\xe9\xed\xf4\x79\x20\x0f\x1a\x39\x91\x1c\xcb\x89\x5c\x7a\x3b\xc5\x05\xf2\x40\x0e\xe5\x48\x8e\xe5\x44\x2e\xbd\x75\x69\x39\x0d\x1f\x4e\x2b\x3b\x4d\x28\x2e\x92\x63\x39\xf9\x9e\xef\xc6\x30\x7e\x3b\xff\xbc\xa2\xea\xff\xff\xb2\x7b\xfe\x37\x0c\xe3\x0f\xe3\x06\xb3\xeb\xd9\xf4\x63\x20\xd8\x23\x50\x23\x70\xf3\x9e\xd0\x6a\x04\x68\x34\x01\x81\x7f\x58\x78\xd2\x78\xdf\x1a\x01\xc3\xe8\x19\x6f\x01\x00\x00\xff\xff\xb5\x6c\x5b\x7d\x04\x18\x00\x00")

func deployDs_storeBytes() ([]byte, error) {
	return bindataRead(
		_deployDs_store,
		"deploy/.DS_Store",
	)
}

func deployDs_store() (*asset, error) {
	bytes, err := deployDs_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/.DS_Store", size: 6148, mode: os.FileMode(420), modTime: time.Unix(1539285838, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployClusterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x49\x8f\xeb\x36\x0c\xbe\xfb\x57\x08\x73\x77\xda\xa0\x45\x51\xf8\xd6\xbe\x5c\x82\x02\x83\x41\x5e\x67\xee\x8c\xcc\x24\xec\xc8\x92\x9e\x24\x7b\x9a\xfe\xfa\xc2\x5b\x36\x5b\x4b\x26\x0f\x2d\x6f\x16\x29\x8a\xfc\x24\x2e\x26\x68\x7a\x43\x63\x49\xc9\x82\x81\x26\xfc\xdb\xa1\x6c\xbf\xec\xe2\xfd\x57\xbb\x20\xf5\x43\xb3\xdc\xa2\x83\x65\xf6\x4e\xb2\x2c\xd8\x97\xda\x3a\x55\x6d\xd0\xaa\xda\x70\x5c\xe1\x8e\x24\x39\x52\x32\xab\xd0\x41\x09\x0e\x8a\x8c\x31\x6e\x10\xda\xc5\x3f\xa9\x42\xeb\xa0\xd2\x05\x93\xb5\x10\x19\x63\x02\xb6\x28\x6c\x2b\xc3\x18\x57\xd2\x19\x25\x04\x9a\xdc\x29\x25\xc6\x03\x0b\xf6\xb4\x5c\xfc\xf8\x94\x31\x26\xa1\xc2\x82\x71\x51\x5b\x87\xa6\x44\x2d\xd4\xb1\x42\xe9\xec\xe2\x40\x0d\x2e\x94\x46\x69\x0f\xb4\x73\x0b\x52\x99\xd5\xc8\x5b\xad\x7b\xa3\x6a\x5d\xb0\xa9\x40\xaf\x6d\x38\x79\x70\xa5\x57\xbc\x3a\x29\xee\x78\x5a\xd4\x06\xc4\xdc\xb1\x19\x63\x96\x2b\x8d\x05\x7b\x6e\x55\x69\xe0\x58\x66\x8c\x35\x20\xa8\xec\xdc\xed\x95\xb7\xc7\xfe\xf6\xb2\x7e\xfb\xe9\x2b\x3f\x60\x05\xfd\x22\x63\xda\x28\x8d\xc6\xd1\x68\x43\x4b\x17\xd8\x9f\xd6\x18\x73\xc7\xf6\x0c\xeb\x0c\xc9\xfd\x69\xb9\x33\x39\x26\x74\x79\x07\xd7\x82\x6a\xfb\x17\x72\x77\x5a\x1e\xe1\x1a\x69\xce\xb8\xe1\x8a\x76\xb4\xbf\x5e\xf3\x4b\x77\x2e\x95\x15\xc9\xe9\x72\x78\x53\x4b\x58\x01\x89\x79\x96\xc7\xdb\x2b\xed\x60\xed\x87\x32\x65\x58\xc1\x0d\x0a\x97\x64\xed\xe1\x0f\x3c\x7e\x72\xbb\xc1\x6f\x35\x19\x9c\x3d\x3d\xef\x3d\x9b\xe5\x8c\x56\xcf\x30\x83\x27\x6e\xc1\xe2\x4a\x55\x30\x8f\x74\x10\xac\xe1\x59\xaf\x57\x77\xef\xac\x80\x1f\x48\xce\x5f\x1f\x39\xac\x3c\xf7\x1a\xbb\xf7\x21\xcc\x3d\xbc\x84\xab\x6f\x43\x16\xdc\x4e\x99\xca\xaf\x24\x6e\x44\x4b\xf0\x11\x64\xa7\xaa\x69\x89\xa0\xda\x28\x81\xcf\x41\xd7\x46\x4a\x70\x71\x24\xa3\x94\x7b\x53\xa2\x4e\x51\x9b\x6e\x6d\x67\xb1\xd2\x49\x72\x8c\xb5\x50\x83\x2b\x18\x49\xf7\xcb\xcf\x49\x3b\x7a\x07\x49\x3a\xdc\xa3\x49\xd8\x61\xe9\x9f\x04\xff\xfe\x1b\x5b\x3a\xf9\x3b\x34\x27\x5d\x63\x38\x65\x5c\x53\xde\x5d\x4d\x82\x58\x8b\x5a\x82\x58\x6b\x66\xe2\x93\x0c\xe4\xcb\x1b\xd1\xef\xf7\xc6\xd3\x80\x49\x70\x23\xbf\x0c\xc2\x88\xe4\x39\xac\x82\x82\x89\xa8\x08\xda\x36\x64\xdc\xf7\xca\x25\xdf\xb8\xfa\x58\x57\xb0\xc7\x17\x70\x87\xff\x01\xe9\xab\xf3\x1f\xc7\x27\x41\xc8\xa0\x16\xc4\x21\x80\x4c\x5a\xdc\xc7\x63\x3d\x8c\x41\xde\xd5\x26\x0f\x6b\x34\xd2\xc3\x1e\x8b\xd2\x2c\x3b\x82\x41\xcf\x06\x63\xe0\x38\xe1\x4a\x74\x1f\xca\xbc\x93\x9c\xb4\x65\x2c\xe1\x55\x69\x55\x7e\x59\xaf\x36\x9f\xee\xb3\x2c\x9a\x86\x38\x3e\xa4\x23\x94\x30\x22\x9b\xc3\x8d\x96\x27\x25\xe4\x97\x56\xcf\xf7\x61\x3d\x2a\xf7\xb6\x61\xa1\xbe\x23\x76\x11\x81\x5e\x23\x25\x33\x18\xdc\xdf\xfc\x35\xcc\x5b\x1e\x49\x03\x0e\xf6\xc1\xf4\x93\x14\xd0\x8d\xe6\x2d\x7a\xbf\x0b\xc5\xdf\x1f\xb6\xa8\xd1\x7c\xbe\x37\xbd\x43\x4b\x2c\xb1\xe5\x03\x7c\x5e\x76\x67\x44\x88\x7b\xf2\xf7\xb3\xbf\x1b\x91\x12\x91\xf2\x04\x5e\x37\xeb\x87\xd1\xae\xa0\xfb\x19\x78\x09\x3e\x82\x40\x73\x3f\xd2\x98\x8e\xb7\x47\x97\x52\x41\xa3\xc5\x29\x94\x00\x47\x1a\x12\x61\xc8\xb0\xd4\x1a\x4b\xbb\x58\x59\x4d\x2e\xaa\xa4\x37\x20\xf7\xd1\x86\x28\x59\x5f\xf8\xe7\xe8\x2e\x65\x29\xf5\x3e\x50\xf1\x46\x01\xda\x85\xd9\x3d\x00\x8f\x25\x95\x78\x04\xbf\x6e\xd6\x5e\xde\xf0\x32\xbc\xfc\xd3\xab\xff\x5c\xf4\x86\x6b\x42\x2d\xc4\x57\xe4\x06\x67\x63\x3b\xb0\xd5\xe7\x72\x7e\xfe\x65\x9f\x70\xba\x61\xcb\x64\xf5\x3c\x1d\x98\xb0\xce\xcd\xc3\x84\x35\xfe\xde\x4f\x18\x9e\x46\x26\xbf\x70\x35\x4b\xf4\x72\x54\xd5\xef\x9a\x04\x65\x70\xae\x34\x5f\x2f\x63\x11\xce\x0d\x96\x28\x1d\x81\xf0\xa6\x80\x87\x66\x3b\x17\xfa\xef\xbb\x6e\x0f\x6b\xee\xb4\x7c\x18\xc3\x5d\x2d\xdd\x40\x99\x45\x34\x5b\x07\xae\xb6\x49\x23\xbf\xfe\xb5\xbd\xbe\x4e\xcb\xb0\x37\xcf\x90\xb4\x0e\x84\x98\x82\xd4\xef\xd8\x2a\x25\x10\x64\xd4\xcd\x93\x9a\x6b\xe7\xcf\x06\xf9\xbd\x6c\xc6\x11\x76\xb3\x04\xa1\x0f\xb0\xcc\xce\x1e\x03\xe7\xa8\x1d\x96\xcf\xb7\x03\xe0\xa7\xa7\xee\x63\x9c\xf8\x76\x9f\x5c\xc9\xb2\x1b\x68\xdb\x7e\x66\xfd\x6f\x00\x00\x00\xff\xff\xfd\x18\x88\xbe\x1f\x17\x00\x00")

func deployClusterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployClusterDeploymentYaml,
		"deploy/cluster-deployment.yaml",
	)
}

func deployClusterDeploymentYaml() (*asset, error) {
	bytes, err := deployClusterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/cluster-deployment.yaml", size: 5919, mode: os.FileMode(420), modTime: time.Unix(1538760925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployCrYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xc8\x41\x0a\x02\x31\x0c\x05\xd0\x7d\x4e\x11\x72\x80\x91\xc1\x5d\x4e\xe0\x09\xdc\x07\xe7\x4b\x3f\x4e\xdb\x60\x4b\x11\x4f\x2f\x6e\x5f\x24\xef\x78\x0f\xf6\xe6\x6a\x85\x0b\x5b\x4f\xb4\x51\xf8\x9c\x1b\xfb\x65\xed\x71\x66\x89\xdd\xe4\xc5\x76\xb8\xda\x8d\x0b\x26\x15\x33\x8e\x98\xe1\xa2\xda\xa2\xc2\xd5\xf0\x89\x9a\x27\x4c\x46\xe2\xf1\xf7\xc1\x2f\x5c\xaf\xf2\x0b\x00\x00\xff\xff\x29\x8a\x00\xc9\x62\x00\x00\x00")

func deployCrYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployCrYaml,
		"deploy/cr.yaml",
	)
}

func deployCrYaml() (*asset, error) {
	bytes, err := deployCrYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/cr.yaml", size: 98, mode: os.FileMode(420), modTime: time.Unix(1538518474, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployCrdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xc1\x4a\x05\x31\x0c\x45\xf7\xfd\x8a\x7c\x41\x65\x76\xd2\xad\x2e\x04\xc5\x85\x0b\xf7\x71\x26\xef\x4d\x78\x9d\x26\x34\x69\xf1\xf3\xa5\x53\x15\xde\x26\x70\x0f\x87\x7b\x09\x2a\x7f\x52\x35\x96\x92\x00\x95\xe9\xdb\xa9\x8c\x64\xf1\xf6\x68\x91\xe5\xa1\x2f\x5f\xe4\xb8\x84\x1b\x97\x2d\xc1\x53\x33\x97\xe3\x83\x4c\x5a\x5d\xe9\x99\x2e\x5c\xd8\x59\x4a\x38\xc8\x71\x43\xc7\x14\x00\x0a\x1e\x94\x60\xe7\x4e\x16\xc7\x8d\xa2\x54\x6c\xe7\x8b\x47\x96\x60\x4a\xeb\xb0\xae\x55\x9a\x4e\xed\x5e\x98\x05\x36\x1c\x80\x39\xfb\xc2\x9d\xce\x98\xd9\xfc\xf5\x1f\xbd\xb1\xf9\x89\x35\xb7\x8a\xf9\x77\xf3\x24\xc6\xe5\xda\x32\xd6\xc9\x02\x80\xad\xa2\x94\xe0\x7d\x54\x2b\xae\xb4\x05\x80\xfe\xf7\x79\x5f\x30\xeb\x8e\x4b\xf8\x09\x00\x00\xff\xff\x6c\xae\x3f\x30\x0f\x01\x00\x00")

func deployCrdYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployCrdYaml,
		"deploy/crd.yaml",
	)
}

func deployCrdYaml() (*asset, error) {
	bytes, err := deployCrdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/crd.yaml", size: 271, mode: os.FileMode(420), modTime: time.Unix(1538518474, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xb1\x52\xc3\x30\x10\x44\x7b\x7d\xc5\xfd\x80\x13\x32\x34\x8c\x6a\x0a\x0a\x0a\x86\x82\xfe\x90\x37\xf1\x0d\x92\x4e\x48\x87\x33\xf9\x7b\x46\xc4\x24\x4e\x91\xed\xec\x79\xbb\x7a\x12\x17\xf9\x40\x6d\xa2\xd9\x13\x97\xd2\xb6\xf3\xce\x7d\x49\x1e\x3d\x3d\xa3\x44\x3d\x25\x64\x73\x09\xc6\x23\x1b\x7b\x47\x94\x39\xc1\xd3\x24\x33\x86\xf1\x4a\x10\x45\xfe\x44\x6c\x9d\xa0\x3e\xb4\x20\x5a\x50\xd9\xb4\x3a\x22\x3d\x66\xd4\x77\xec\x51\x91\x03\xce\xe0\xf0\x47\x6d\xb4\x20\xb7\x49\xf6\xb6\x11\x5d\xfe\xcf\x3b\x8e\x65\xe2\xdd\xf2\xf9\x22\x33\x5c\x2b\x08\xbd\x57\x51\xa2\x04\x6e\x9e\x1e\x1d\x51\x43\x44\x30\xad\xe7\xc5\xc4\x16\xa6\xd7\x95\xcb\x1d\x1b\x43\x2a\x91\x6d\xf1\x58\x5f\xb0\x27\xde\x0c\xdc\x99\x20\xfa\x17\xea\x09\x9a\x8d\x25\xa3\x5e\x6a\xc3\xfa\xad\x6e\x7a\x3d\x92\xf8\x00\x4f\xdf\x3f\x7c\xda\x88\x6e\xc7\x83\xea\x78\x94\xbc\xed\xb4\xef\x66\xcd\x2e\x6c\xd1\x6a\x2b\x9b\xe1\x7a\xd8\x9b\x56\xf3\xf4\xf4\xf0\x1b\x00\x00\xff\xff\x6b\xa8\x60\xd9\xc7\x01\x00\x00")

func deployDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployDeploymentYaml,
		"deploy/deployment.yaml",
	)
}

func deployDeploymentYaml() (*asset, error) {
	bytes, err := deployDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/deployment.yaml", size: 455, mode: os.FileMode(420), modTime: time.Unix(1539714582, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployRbacYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x52\xb1\x6e\xe3\x30\x0c\xdd\xf5\x15\x82\xc7\x03\xe4\x43\xb6\x83\xb7\xbb\xe5\xf6\x14\xe8\x4e\x4b\x74\xc2\x46\x12\x05\x8a\x32\xd0\x7e\x7d\x11\x3b\x49\xd3\x24\x68\x87\x6e\x7a\xd2\xe3\xe3\x13\x1f\x0f\x94\xc3\x60\xb7\x1c\xd1\x40\xa1\x67\x94\x4a\x9c\x07\x2b\x23\xf8\x1e\x9a\xee\x59\xe8\x0d\x94\x38\xf7\x87\x3f\xb5\x27\xfe\x3d\x6f\x46\x54\xd8\x98\x84\x0a\x01\x14\x06\x63\x6d\x86\x84\x83\xdd\xd3\x8c\x8e\x0b\x0a\x28\x8b\x91\x16\xb1\x0e\xc6\x59\x28\xf4\x5f\xb8\x95\x7a\x64\xba\x85\xd5\x73\xc1\x5c\xf7\x34\x69\x4f\x6c\xac\x15\xac\xdc\xc4\xe3\x89\xd2\xfd\xea\x8c\xb5\x33\xca\x78\x75\x71\x27\xd4\x75\xf7\x95\x85\x43\x5d\x0e\x15\x65\x26\x8f\x2b\xc0\x1c\x0a\x53\xd6\x15\x95\xe3\x1f\xab\x62\xd6\x99\x63\x4b\xe8\x23\x50\x3a\x11\x67\x3c\xb3\x3c\xe7\x89\x76\x09\xca\x59\xcf\x0b\x2e\x4f\xdf\xd9\x82\xb2\x94\xdc\x18\x0b\x58\x22\xbf\xa6\x8b\x7c\x00\x4c\x9c\x2b\x9e\xa0\x60\x89\xe4\xe1\x82\xab\x82\xe2\xd4\x62\x7d\xd8\xd3\x38\xe7\x8c\xf9\x48\xee\x1f\xe5\x40\x79\xf7\xe3\x00\x03\x4e\xd0\xa2\x3a\xf0\x9e\x5b\x56\xf7\x39\xd0\xda\xc6\x17\xf4\xba\x64\xba\xf6\x7e\x5a\x87\xfc\x77\xa5\xdf\xca\x18\xe1\x88\x5b\x9c\x8e\xfa\x57\x5b\xf6\x78\x5b\xec\x65\x8c\x5f\x58\x37\xef\x01\x00\x00\xff\xff\x63\xc5\xa5\xc8\xad\x02\x00\x00")

func deployRbacYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployRbacYaml,
		"deploy/rbac.yaml",
	)
}

func deployRbacYaml() (*asset, error) {
	bytes, err := deployRbacYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/rbac.yaml", size: 685, mode: os.FileMode(420), modTime: time.Unix(1538518474, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"deploy/.DS_Store":               deployDs_store,
	"deploy/cluster-deployment.yaml": deployClusterDeploymentYaml,
	"deploy/cr.yaml":                 deployCrYaml,
	"deploy/crd.yaml":                deployCrdYaml,
	"deploy/deployment.yaml":         deployDeploymentYaml,
	"deploy/rbac.yaml":               deployRbacYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"deploy": &bintree{nil, map[string]*bintree{
		".DS_Store":               &bintree{deployDs_store, map[string]*bintree{}},
		"cluster-deployment.yaml": &bintree{deployClusterDeploymentYaml, map[string]*bintree{}},
		"cr.yaml":                 &bintree{deployCrYaml, map[string]*bintree{}},
		"crd.yaml":                &bintree{deployCrdYaml, map[string]*bintree{}},
		"deployment.yaml":         &bintree{deployDeploymentYaml, map[string]*bintree{}},
		"rbac.yaml":               &bintree{deployRbacYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
