// Code generated by go-bindata.
// sources:
// deploy/.DS_Store
// deploy/cluster-deployment.yaml
// deploy/crds/hive_v1alpha1_hive_cr.yaml
// deploy/crds/hive_v1alpha1_hive_crd.yaml
// deploy/deployment.yaml
// deploy/operator.yaml
// deploy/role.yaml
// deploy/role_binding.yaml
// deploy/service_account.yaml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _deployDs_store = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xd8\x3f\x8a\xc2\x40\x1c\xc5\xf1\xf7\x9b\x9d\x62\x60\x9b\x29\xb7\x9c\x66\x0f\xb0\x37\x18\x42\xf6\x04\xb9\xc0\xc2\x06\x6c\x24\x42\x44\xeb\x1c\x5d\x86\x79\xc5\xa0\x98\x4e\x8c\xf2\x3e\xcd\x57\xf2\x47\x25\x45\xe6\x0f\x00\xeb\x4e\xe3\x0f\x10\x01\x04\xd4\xe2\x1b\xb7\x0c\x80\xc7\x3f\x66\x8c\x38\x9e\x87\x79\xda\x1f\xa6\x1d\x8f\xbb\xe6\x1a\x2b\xdf\x71\x75\x5e\x44\x44\x44\xb6\x87\x63\x74\xf8\x7c\xf6\x1f\x11\x91\xcd\x29\xef\x87\xc4\x66\x76\xa9\x35\x9e\x77\xac\x6f\xee\x89\x6c\x62\x33\xbb\xd4\x1a\xaf\x73\xac\x67\x03\x1b\xd9\xc4\x66\x76\xa9\xe5\x4b\xcb\xb8\xf8\x30\xfe\xb2\x05\x36\xb2\x89\xcd\x8f\x79\x36\x22\xaf\xee\xa3\x26\x96\xf1\xff\xf7\xce\xfa\x5f\x44\xde\x9b\xf9\x7e\xe8\xbb\x95\x4d\xbb\x72\xfc\xaf\xf9\xbc\x36\x09\x70\x75\x43\xf1\xab\xb9\x57\x13\x01\x91\x8d\xb9\x04\x00\x00\xff\xff\x0f\x6a\x6b\xe1\x04\x18\x00\x00")

func deployDs_storeBytes() ([]byte, error) {
	return bindataRead(
		_deployDs_store,
		"deploy/.DS_Store",
	)
}

func deployDs_store() (*asset, error) {
	bytes, err := deployDs_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/.DS_Store", size: 6148, mode: os.FileMode(420), modTime: time.Unix(1541705452, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployClusterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x49\x8f\xeb\x36\x0c\xbe\xfb\x57\x08\x73\x77\xda\xa0\x45\x51\xf8\xd6\xbe\x5c\x82\x02\x83\x41\x5e\x67\xee\x8c\xcc\x24\xec\xc8\x92\x9e\x24\x7b\x9a\xfe\xfa\xc2\x5b\x36\x5b\x4b\x26\x0f\x2d\x6f\x16\x29\x8a\xfc\x24\x2e\x26\x68\x7a\x43\x63\x49\xc9\x82\x81\x26\xfc\xdb\xa1\x6c\xbf\xec\xe2\xfd\x57\xbb\x20\xf5\x43\xb3\xdc\xa2\x83\x65\xf6\x4e\xb2\x2c\xd8\x97\xda\x3a\x55\x6d\xd0\xaa\xda\x70\x5c\xe1\x8e\x24\x39\x52\x32\xab\xd0\x41\x09\x0e\x8a\x8c\x31\x6e\x10\xda\xc5\x3f\xa9\x42\xeb\xa0\xd2\x05\x93\xb5\x10\x19\x63\x02\xb6\x28\x6c\x2b\xc3\x18\x57\xd2\x19\x25\x04\x9a\xdc\x29\x25\xc6\x03\x0b\xf6\xb4\x5c\xfc\xf8\x94\x31\x26\xa1\xc2\x82\x71\x51\x5b\x87\xa6\x44\x2d\xd4\xb1\x42\xe9\xec\xe2\x40\x0d\x2e\x94\x46\x69\x0f\xb4\x73\x0b\x52\x99\xd5\xc8\x5b\xad\x7b\xa3\x6a\x5d\xb0\xa9\x40\xaf\x6d\x38\x79\x70\xa5\x57\xbc\x3a\x29\xee\x78\x5a\xd4\x06\xc4\xdc\xb1\x19\x63\x96\x2b\x8d\x05\x7b\x6e\x55\x69\xe0\x58\x66\x8c\x35\x20\xa8\xec\xdc\xed\x95\xb7\xc7\xfe\xf6\xb2\x7e\xfb\xe9\x2b\x3f\x60\x05\xfd\x22\x63\xda\x28\x8d\xc6\xd1\x68\x43\x4b\x17\xd8\x9f\xd6\x18\x73\xc7\xf6\x0c\xeb\x0c\xc9\xfd\x69\xb9\x33\x39\x26\x74\x79\x07\xd7\x82\x6a\xfb\x17\x72\x77\x5a\x1e\xe1\x1a\x69\xce\xb8\xe1\x8a\x76\xb4\xbf\x5e\xf3\x4b\x77\x2e\x95\x15\xc9\xe9\x72\x78\x53\x4b\x58\x01\x89\x79\x96\xc7\xdb\x2b\xed\x60\xed\x87\x32\x65\x58\xc1\x0d\x0a\x97\x64\xed\xe1\x0f\x3c\x7e\x72\xbb\xc1\x6f\x35\x19\x9c\x3d\x3d\xef\x3d\x9b\xe5\x8c\x56\xcf\x30\x83\x27\x6e\xc1\xe2\x4a\x55\x30\x8f\x74\x10\xac\xe1\x59\xaf\x57\x77\xef\xac\x80\x1f\x48\xce\x5f\x1f\x39\xac\x3c\xf7\x1a\xbb\xf7\x21\xcc\x3d\xbc\x84\xab\x6f\x43\x16\xdc\x4e\x99\xca\xaf\x24\x6e\x44\x4b\xf0\x11\x64\xa7\xaa\x69\x89\xa0\xda\x28\x81\xcf\x41\xd7\x46\x4a\x70\x71\x24\xa3\x94\x7b\x53\xa2\x4e\x51\x9b\x6e\x6d\x67\xb1\xd2\x49\x72\x8c\xb5\x50\x83\x2b\x18\x49\xf7\xcb\xcf\x49\x3b\x7a\x07\x49\x3a\xdc\xa3\x49\xd8\x61\xe9\x9f\x04\xff\xfe\x1b\x5b\x3a\xf9\x3b\x34\x27\x5d\x63\x38\x65\x5c\x53\xde\x5d\x4d\x82\x58\x8b\x5a\x82\x58\x6b\x66\xe2\x93\x0c\xe4\xcb\x1b\xd1\xef\xf7\xc6\xd3\x80\x49\x70\x23\xbf\x0c\xc2\x88\xe4\x39\xac\x82\x82\x89\xa8\x08\xda\x36\x64\xdc\xf7\xca\x25\xdf\xb8\xfa\x58\x57\xb0\xc7\x17\x70\x87\xff\x01\xe9\xab\xf3\x1f\xc7\x27\x41\xc8\xa0\x16\xc4\x21\x80\x4c\x5a\xdc\xc7\x63\x3d\x8c\x41\xde\xd5\x26\x0f\x6b\x34\xd2\xc3\x1e\x8b\xd2\x2c\x3b\x82\x41\xcf\x06\x63\xe0\x38\xe1\x4a\x74\x1f\xca\xbc\x93\x9c\xb4\x65\x2c\xe1\x55\x69\x55\x7e\x59\xaf\x36\x9f\xee\xb3\x2c\x9a\x86\x38\x3e\xa4\x23\x94\x30\x22\x9b\xc3\x8d\x96\x27\x25\xe4\x97\x56\xcf\xf7\x61\x3d\x2a\xf7\xb6\x61\xa1\xbe\x23\x76\x11\x81\x5e\x23\x25\x33\x18\xdc\xdf\xfc\x35\xcc\x5b\x1e\x49\x03\x0e\xf6\xc1\xf4\x93\x14\xd0\x8d\xe6\x2d\x7a\xbf\x0b\xc5\xdf\x1f\xb6\xa8\xd1\x7c\xbe\x37\xbd\x43\x4b\x2c\xb1\xe5\x03\x7c\x5e\x76\x67\x44\x88\x7b\xf2\xf7\xb3\xbf\x1b\x91\x12\x91\xf2\x04\x5e\x37\xeb\x87\xd1\xae\xa0\xfb\x19\x78\x09\x3e\x82\x40\x73\x3f\xd2\x98\x8e\xb7\x47\x97\x52\x41\xa3\xc5\x29\x94\x00\x47\x1a\x12\x61\xc8\xb0\xd4\x1a\x4b\xbb\x58\x59\x4d\x2e\xaa\xa4\x37\x20\xf7\xd1\x86\x28\x59\x5f\xf8\xe7\xe8\x2e\x65\x29\xf5\x3e\x50\xf1\x46\x01\xda\x85\xd9\x3d\x00\x8f\x25\x95\x78\x04\xbf\x6e\xd6\x5e\xde\xf0\x32\xbc\xfc\xd3\xab\xff\x5c\xf4\x86\x6b\x42\x2d\xc4\x57\xe4\x06\x67\x63\x3b\xb0\xd5\xe7\x72\x7e\xfe\x65\x9f\x70\xba\x61\xcb\x64\xf5\x3c\x1d\x98\xb0\xce\xcd\xc3\x84\x35\xfe\xde\x4f\x18\x9e\x46\x26\xbf\x70\x35\x4b\xf4\x72\x54\xd5\xef\x9a\x04\x65\x70\xae\x34\x5f\x2f\x63\x11\xce\x0d\x96\x28\x1d\x81\xf0\xa6\x80\x87\x66\x3b\x17\xfa\xef\xbb\x6e\x0f\x6b\xee\xb4\x7c\x18\xc3\x5d\x2d\xdd\x40\x99\x45\x34\x5b\x07\xae\xb6\x49\x23\xbf\xfe\xb5\xbd\xbe\x4e\xcb\xb0\x37\xcf\x90\xb4\x0e\x84\x98\x82\xd4\xef\xd8\x2a\x25\x10\x64\xd4\xcd\x93\x9a\x6b\xe7\xcf\x06\xf9\xbd\x6c\xc6\x11\x76\xb3\x04\xa1\x0f\xb0\xcc\xce\x1e\x03\xe7\xa8\x1d\x96\xcf\xb7\x03\xe0\xa7\xa7\xee\x63\x9c\xf8\x76\x9f\x5c\xc9\xb2\x1b\x68\xdb\x7e\x66\xfd\x6f\x00\x00\x00\xff\xff\xfd\x18\x88\xbe\x1f\x17\x00\x00")

func deployClusterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployClusterDeploymentYaml,
		"deploy/cluster-deployment.yaml",
	)
}

func deployClusterDeploymentYaml() (*asset, error) {
	bytes, err := deployClusterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/cluster-deployment.yaml", size: 5919, mode: os.FileMode(420), modTime: time.Unix(1541705744, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployCrdsHive_v1alpha1_hive_crYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xcb\x31\x0a\x02\x31\x10\x05\xd0\x7e\x4e\xf1\xc1\xda\x95\xc5\x2e\x9d\x9d\x27\xb0\x1f\xcc\x5f\x32\xb8\x49\x86\x9d\x10\xc4\xd3\xcb\xd6\x8f\xa7\x6e\x2f\x1e\x61\xbd\x25\x14\x9b\x5c\xba\xb3\x45\xb1\x6d\x2c\xd6\x6f\x73\xd5\xdd\x8b\xae\xf2\xb1\x96\x13\x9e\x36\x29\x95\x43\xb3\x0e\x4d\x02\x34\xad\x4c\xe0\x57\xab\xef\xbc\x9e\x5f\xc2\xf9\x3e\xe9\x82\x47\xce\xd8\x8c\x7b\x0e\x14\x1e\x14\x20\xec\xc7\x84\xbb\xfc\x03\x00\x00\xff\xff\x8e\xdf\x32\xc7\x75\x00\x00\x00")

func deployCrdsHive_v1alpha1_hive_crYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployCrdsHive_v1alpha1_hive_crYaml,
		"deploy/crds/hive_v1alpha1_hive_cr.yaml",
	)
}

func deployCrdsHive_v1alpha1_hive_crYaml() (*asset, error) {
	bytes, err := deployCrdsHive_v1alpha1_hive_crYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/crds/hive_v1alpha1_hive_cr.yaml", size: 117, mode: os.FileMode(420), modTime: time.Unix(1541703163, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployCrdsHive_v1alpha1_hive_crdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xc1\x4a\x05\x31\x0c\x45\xf7\xfd\x8a\x7c\x41\x65\x76\xd2\xad\x2e\x04\xc5\x85\x0b\xf7\x71\x26\xef\x4d\x78\x9d\x26\x34\x69\xf1\xf3\xa5\x53\x15\xde\x26\x70\x0f\x87\x7b\x09\x2a\x7f\x52\x35\x96\x92\x00\x95\xe9\xdb\xa9\x8c\x64\xf1\xf6\x68\x91\xe5\xa1\x2f\x5f\xe4\xb8\x84\x1b\x97\x2d\xc1\x53\x33\x97\xe3\x83\x4c\x5a\x5d\xe9\x99\x2e\x5c\xd8\x59\x4a\x38\xc8\x71\x43\xc7\x14\x00\x0a\x1e\x94\x60\xe7\x4e\x16\xc7\x8d\xa2\x54\x6c\xe7\x8b\x47\x96\x60\x4a\xeb\xb0\xae\x55\x9a\x4e\xed\x5e\x98\x05\x36\x1c\x80\x39\xfb\xc2\x9d\xce\x98\xd9\xfc\xf5\x1f\xbd\xb1\xf9\x89\x35\xb7\x8a\xf9\x77\xf3\x24\xc6\xe5\xda\x32\xd6\xc9\x02\x80\xad\xa2\x94\xe0\x7d\x54\x2b\xae\xb4\x05\x80\xfe\xf7\x79\x5f\x30\xeb\x8e\x4b\xf8\x09\x00\x00\xff\xff\x6c\xae\x3f\x30\x0f\x01\x00\x00")

func deployCrdsHive_v1alpha1_hive_crdYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployCrdsHive_v1alpha1_hive_crdYaml,
		"deploy/crds/hive_v1alpha1_hive_crd.yaml",
	)
}

func deployCrdsHive_v1alpha1_hive_crdYaml() (*asset, error) {
	bytes, err := deployCrdsHive_v1alpha1_hive_crdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/crds/hive_v1alpha1_hive_crd.yaml", size: 271, mode: os.FileMode(420), modTime: time.Unix(1541703163, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x31\x52\x03\x31\x0c\x45\x7b\x9f\x42\x17\xd8\x84\x0c\x0d\xe3\x9a\x82\x82\x82\xa1\xa0\x17\xde\x9f\xac\x06\xdb\x32\xb6\xd8\x4c\x6e\xcf\x78\x09\xc9\xa6\x88\x3a\x7b\xde\xff\x7a\x36\x17\xf9\x40\x6d\xa2\xd9\x13\x97\xd2\xb6\xf3\xce\x7d\x49\x1e\x3d\x3d\xa3\x44\x3d\x25\x64\x73\x09\xc6\x23\x1b\x7b\x47\x94\x39\xc1\xd3\x24\x33\x86\xf1\x4a\x10\x45\xfe\x44\x6c\x9d\xa0\x5e\x74\x46\xb4\xa0\xb2\x69\x75\x44\x7a\xcc\xa8\xef\xd8\xa3\x22\x07\x74\x70\x58\x98\x8d\x16\xe4\x36\xc9\xde\x36\xa2\xcb\xed\xbc\xe3\x58\x26\xde\x2d\x87\x17\x99\xe1\x5a\x41\xe8\x89\x8a\x12\x25\x70\xf3\xf4\xe8\x88\x1a\x22\x82\x69\xfd\x5b\x9a\xd8\xc2\xf4\xba\xb2\xb8\xe3\x61\x48\x25\xb2\xe1\x9c\x5a\x3d\xad\x4f\xbc\x29\xb8\x53\x41\xf4\x2f\xd4\x27\x68\x36\x96\x8c\x7a\x89\x0d\xeb\x5f\xba\xc9\xf5\x91\xc4\x07\x78\xfa\xfe\xe1\xd3\x46\x74\x3b\x1e\x54\xc7\xa3\xe4\x6d\xa7\x7d\x37\x6b\x76\x61\x8b\x56\x5b\xd9\x0c\xd7\x65\x6f\x5a\xcd\xd3\xd3\xc3\x6f\x00\x00\x00\xff\xff\xe7\xe8\xda\x35\xc1\x01\x00\x00")

func deployDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployDeploymentYaml,
		"deploy/deployment.yaml",
	)
}

func deployDeploymentYaml() (*asset, error) {
	bytes, err := deployDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/deployment.yaml", size: 449, mode: os.FileMode(420), modTime: time.Unix(1541705412, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployOperatorYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x3f\x6f\xdb\x40\x0c\xc5\x77\x7d\x0a\x22\x9d\x13\x2b\x4b\x87\xdb\x84\xc4\x45\x87\x36\x16\xd4\xa0\x1d\x0b\xfa\x44\x5b\x44\xef\x5f\xef\x28\x19\xfa\xf6\x85\xe4\x3f\x38\xb5\xd6\xd8\x9b\x04\x3e\xf2\xfd\x1e\x09\x61\xe0\xef\x14\x13\x7b\xa7\x00\x43\x48\x9b\xe1\xb9\xf8\xc5\xae\x55\xf0\x4a\xc1\xf8\xd1\x92\x93\xc2\x92\x60\x8b\x82\xaa\x00\x70\x68\x49\x41\xc7\x03\x3d\xfa\x40\x11\xc5\xc7\x22\x05\xd2\x93\x16\x29\x18\xd6\x98\x14\x3c\x17\x00\x89\x0c\x69\xf1\x71\x52\x00\x2c\x8a\xee\xbe\xe0\x9e\x4c\x3a\x17\xee\x5b\x01\x08\xd9\x60\x50\xe8\x32\x96\xa1\xa7\x67\x16\x0e\x6b\x1e\x00\xd7\x48\xf3\x37\xc5\x81\x35\x55\x5a\xfb\xde\xc9\xdb\xca\x04\x80\xf6\x4e\x90\x1d\xc5\xcc\xff\x71\x95\x70\x7e\x1f\xa0\xa1\x60\x50\x13\x48\xc7\x09\x4e\x2c\x1d\x48\x47\xb0\xef\xd9\x08\xb0\xc5\x23\xcd\x0e\xd9\xc8\x5c\x54\xf0\xbb\xc7\xf1\x89\xfd\xa6\x3d\x7a\xdf\x9e\xd8\x6d\x26\x84\x9a\x36\x4f\x92\x75\x07\x1f\x25\xcb\x33\x25\xba\xe5\xac\x7d\x14\x05\x1f\xcb\xb2\x2c\xb3\x86\xeb\x51\x2c\x49\x64\x9d\x32\x45\x7b\x6b\xd1\xb5\x4b\xb7\xb5\xcd\xe6\x98\x75\x6f\x4c\xed\x0d\xeb\x51\x41\x65\x4e\x38\xe6\x76\xe4\x06\xb5\xe0\x5e\x8f\xf5\xa3\x7a\x7f\xf9\xfc\xf3\xad\xfa\xba\xfd\x56\x57\x2f\xdb\x45\x0f\xc0\x80\xa6\xa7\x4f\xd1\x5b\xf5\x97\x00\x70\x60\x32\x6d\x43\x87\x7f\x95\x8b\x56\xa3\x74\xea\xf6\x53\x3c\x4d\xb8\x14\x50\xd3\xdd\x18\xf5\xee\x75\x0e\xf1\x7f\xf9\x77\xd1\xbb\x7a\xdb\x54\xef\xbb\x66\x95\xaf\xe0\x61\x71\xf8\x87\xe2\x4f\x00\x00\x00\xff\xff\xc9\xb0\x11\xd9\x8a\x03\x00\x00")

func deployOperatorYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployOperatorYaml,
		"deploy/operator.yaml",
	)
}

func deployOperatorYaml() (*asset, error) {
	bytes, err := deployOperatorYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/operator.yaml", size: 906, mode: os.FileMode(420), modTime: time.Unix(1541705228, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xb1\x6e\xc3\x30\x0c\x44\x77\x7f\x85\x90\x25\x40\x81\xb8\xe8\x56\xf8\x07\xba\x17\x45\x77\x46\xbe\x24\x44\x24\x51\x20\x29\x03\xed\xd7\x17\x76\x9c\x0c\xf1\xd2\x4d\x27\x9d\xee\x9e\x44\xaa\xfc\x0d\x35\x96\x32\x04\x3d\x52\xec\xa9\xf9\x45\x94\x7f\xc9\x59\x4a\x7f\x7d\xb7\x9e\xe5\x75\x7a\xeb\xae\x5c\xc6\x21\x7c\x4a\x42\x97\xe1\x34\x92\xd3\xd0\x85\x10\x15\x8b\xf3\x8b\x33\xcc\x29\xd7\x21\x94\x96\x52\x17\x42\xa1\x8c\x21\x5c\x78\xc2\x41\x2a\x94\x5c\xb4\xd3\x96\x60\x43\x77\x08\x54\xf9\x43\xa5\x55\x9b\x33\x0e\x61\xb7\xeb\x42\x50\x98\x34\x8d\x58\xf7\xaa\x8c\xb6\x2c\x0c\x3a\x71\xc4\x4d\xa0\x8c\x55\xb8\xf8\x4d\xd5\x19\xdd\x1c\xc5\x27\x49\x2d\x23\x26\xe2\xbc\x1a\x27\xdc\x5d\x51\xca\x89\xcf\x99\xea\x3d\x2f\x2a\x96\xa3\x09\x7a\x5c\xdb\xf6\x2f\xfb\x2d\x16\xd5\xe5\xca\x13\xd8\x88\x9a\xe4\x27\x3f\xe2\x47\x42\x96\x62\x58\xa5\xa2\x26\x8e\xf4\xd0\xe6\xe4\x38\xb5\x64\xff\xeb\xcc\x52\xd8\x45\xb9\x9c\xfb\x28\x0a\xb1\x3e\x4a\xde\x42\xac\x9f\xb2\xba\x9f\x82\xcf\xf0\xdb\xc3\xe7\xe1\x60\xdb\x31\x0f\xa5\x97\x8a\x62\x17\x3e\x79\xcf\xb2\xcd\x9f\xd9\x36\xb0\x7f\x01\x00\x00\xff\xff\xc2\xfc\x18\x29\x2d\x02\x00\x00")

func deployRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployRoleYaml,
		"deploy/role.yaml",
	)
}

func deployRoleYaml() (*asset, error) {
	bytes, err := deployRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/role.yaml", size: 557, mode: os.FileMode(420), modTime: time.Unix(1541703163, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployRole_bindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\x3d\xae\xc2\x30\x0c\x07\xf0\x3d\xa7\xf0\x05\xda\xa7\xb7\xa1\x6c\xb0\xb0\x17\x89\xdd\x4d\x0d\x35\x6d\xed\xc8\x71\x32\x70\x7a\x84\x18\x98\xca\xfe\xff\xf8\x2d\x2c\x53\x84\x41\x57\x3a\xb1\x4c\x2c\xf7\x80\x99\xaf\x64\x85\x55\x22\xd8\x88\xa9\xc7\xea\xb3\x1a\x3f\xd1\x59\xa5\x5f\x0e\xa5\x67\xfd\x6b\xff\x61\x23\xc7\x09\x1d\x63\x00\x10\xdc\x28\xc2\xcc\x8d\x3a\xcd\x64\xe8\x6a\xa1\xd4\xf1\x41\xc9\x4b\x0c\x1d\x7c\x6e\x2e\x64\x8d\x13\x1d\x53\xd2\x2a\xbe\x53\x33\x5d\x69\xa0\xdb\x7b\xf5\x8b\xdb\xc9\x02\x60\xe6\xb3\x69\xcd\x3f\xac\xe1\x15\x00\x00\xff\xff\xe6\xd4\xca\xc7\xe4\x00\x00\x00")

func deployRole_bindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployRole_bindingYaml,
		"deploy/role_binding.yaml",
	)
}

func deployRole_bindingYaml() (*asset, error) {
	bytes, err := deployRole_bindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/role_binding.yaml", size: 228, mode: os.FileMode(420), modTime: time.Unix(1541702858, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployService_accountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x31\x0e\x80\x30\x08\x05\xd0\x9d\x53\x70\x01\x07\x57\x36\xcf\x60\xe2\x4e\xda\x9f\x48\x4c\xa1\x41\xec\xf9\x7d\x3a\xed\x42\xbe\x16\x2e\xbc\x76\x7a\xcc\xbb\xf0\x89\x5c\xd6\x70\xb4\x16\x9f\x17\x0d\x94\x76\x2d\x15\x62\x76\x1d\x10\xbe\x6d\x61\x8b\x89\xd4\x8a\xa4\x3f\x00\x00\xff\xff\x6b\x1f\x4d\x0a\x44\x00\x00\x00")

func deployService_accountYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployService_accountYaml,
		"deploy/service_account.yaml",
	)
}

func deployService_accountYaml() (*asset, error) {
	bytes, err := deployService_accountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/service_account.yaml", size: 68, mode: os.FileMode(420), modTime: time.Unix(1541702858, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"deploy/.DS_Store": deployDs_store,
	"deploy/cluster-deployment.yaml": deployClusterDeploymentYaml,
	"deploy/crds/hive_v1alpha1_hive_cr.yaml": deployCrdsHive_v1alpha1_hive_crYaml,
	"deploy/crds/hive_v1alpha1_hive_crd.yaml": deployCrdsHive_v1alpha1_hive_crdYaml,
	"deploy/deployment.yaml": deployDeploymentYaml,
	"deploy/operator.yaml": deployOperatorYaml,
	"deploy/role.yaml": deployRoleYaml,
	"deploy/role_binding.yaml": deployRole_bindingYaml,
	"deploy/service_account.yaml": deployService_accountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"deploy": &bintree{nil, map[string]*bintree{
		".DS_Store": &bintree{deployDs_store, map[string]*bintree{}},
		"cluster-deployment.yaml": &bintree{deployClusterDeploymentYaml, map[string]*bintree{}},
		"crds": &bintree{nil, map[string]*bintree{
			"hive_v1alpha1_hive_cr.yaml": &bintree{deployCrdsHive_v1alpha1_hive_crYaml, map[string]*bintree{}},
			"hive_v1alpha1_hive_crd.yaml": &bintree{deployCrdsHive_v1alpha1_hive_crdYaml, map[string]*bintree{}},
		}},
		"deployment.yaml": &bintree{deployDeploymentYaml, map[string]*bintree{}},
		"operator.yaml": &bintree{deployOperatorYaml, map[string]*bintree{}},
		"role.yaml": &bintree{deployRoleYaml, map[string]*bintree{}},
		"role_binding.yaml": &bintree{deployRole_bindingYaml, map[string]*bintree{}},
		"service_account.yaml": &bintree{deployService_accountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

